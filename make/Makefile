# Alternative GNU Make workspace makefile autogenerated by Premake

ifndef config
  config=ci
endif

ifndef verbose
  SILENT = @
endif

ifeq ($(config),ci)
  testenv_config = ci
  moduletests_config = ci
  moduletestsIL_config = ci
  devtests_config = ci
  buildfail_config = ci
  memleak_config = ci
  dstw_gen_config = ci
  dstw_runtime_config = ci
  systemtests_config = ci
  dstw_stop_config = ci
  gcovapp_config = ci
  gcovtests_config = ci

else ifeq ($(config),debug)
  testenv_config = debug
  moduletests_config = debug
  moduletestsIL_config = debug
  devtests_config = debug
  buildfail_config = debug
  memleak_config = debug
  dstw_gen_config = debug
  dstw_runtime_config = debug
  systemtests_config = debug
  dstw_stop_config = debug
  gcovapp_config = debug
  gcovtests_config = debug

else ifeq ($(config),memleak)
  testenv_config = memleak
  moduletests_config = memleak
  moduletestsIL_config = memleak
  devtests_config = memleak
  buildfail_config = memleak
  memleak_config = memleak
  dstw_gen_config = memleak
  dstw_runtime_config = memleak
  systemtests_config = memleak
  dstw_stop_config = memleak
  gcovapp_config = memleak
  gcovtests_config = memleak

else ifeq ($(config),bullseye)
  testenv_config = bullseye
  moduletests_config = bullseye
  moduletestsIL_config = bullseye
  devtests_config = bullseye
  buildfail_config = bullseye
  memleak_config = bullseye
  dstw_gen_config = bullseye
  dstw_runtime_config = bullseye
  systemtests_config = bullseye
  dstw_stop_config = bullseye
  gcovapp_config = bullseye
  gcovtests_config = bullseye

else ifeq ($(config),fail)
  testenv_config = fail
  moduletests_config = fail
  moduletestsIL_config = fail
  devtests_config = fail
  buildfail_config = fail
  memleak_config = fail
  dstw_gen_config = fail
  dstw_runtime_config = fail
  systemtests_config = fail
  dstw_stop_config = fail
  gcovapp_config = fail
  gcovtests_config = fail

else
  $(error "invalid configuration $(config)")
endif

PROJECTS := testenv moduletests moduletestsIL devtests buildfail memleak dstw_gen dstw_runtime systemtests dstw_stop gcovapp gcovtests

.PHONY: all clean help $(PROJECTS) 

all: $(PROJECTS)

testenv:
ifneq (,$(testenv_config))
	@echo "==== Building testenv ($(testenv_config)) ===="
	@${MAKE} --no-print-directory -C . -f testenv.make config=$(testenv_config)
endif

moduletests: testenv
ifneq (,$(moduletests_config))
	@echo "==== Building moduletests ($(moduletests_config)) ===="
	@${MAKE} --no-print-directory -C . -f moduletests.make config=$(moduletests_config)
endif

moduletestsIL: testenv
ifneq (,$(moduletestsIL_config))
	@echo "==== Building moduletestsIL ($(moduletestsIL_config)) ===="
	@${MAKE} --no-print-directory -C . -f moduletestsIL.make config=$(moduletestsIL_config)
endif

devtests: testenv
ifneq (,$(devtests_config))
	@echo "==== Building devtests ($(devtests_config)) ===="
	@${MAKE} --no-print-directory -C . -f devtests.make config=$(devtests_config)
endif

buildfail:
ifneq (,$(buildfail_config))
	@echo "==== Building buildfail ($(buildfail_config)) ===="
	@${MAKE} --no-print-directory -C . -f buildfail.make config=$(buildfail_config)
endif

memleak:
ifneq (,$(memleak_config))
	@echo "==== Building memleak ($(memleak_config)) ===="
	@${MAKE} --no-print-directory -C . -f memleak.make config=$(memleak_config)
endif

dstw_gen:
ifneq (,$(dstw_gen_config))
	@echo "==== Building dstw_gen ($(dstw_gen_config)) ===="
	@${MAKE} --no-print-directory -C . -f dstw_gen.make config=$(dstw_gen_config)
endif

dstw_runtime:
ifneq (,$(dstw_runtime_config))
	@echo "==== Building dstw_runtime ($(dstw_runtime_config)) ===="
	@${MAKE} --no-print-directory -C . -f dstw_runtime.make config=$(dstw_runtime_config)
endif

systemtests: testenv
ifneq (,$(systemtests_config))
	@echo "==== Building systemtests ($(systemtests_config)) ===="
	@${MAKE} --no-print-directory -C . -f systemtests.make config=$(systemtests_config)
endif

dstw_stop:
ifneq (,$(dstw_stop_config))
	@echo "==== Building dstw_stop ($(dstw_stop_config)) ===="
	@${MAKE} --no-print-directory -C . -f dstw_stop.make config=$(dstw_stop_config)
endif

gcovapp:
ifneq (,$(gcovapp_config))
	@echo "==== Building gcovapp ($(gcovapp_config)) ===="
	@${MAKE} --no-print-directory -C . -f gcovapp.make config=$(gcovapp_config)
endif

gcovtests: gcovapp testenv
ifneq (,$(gcovtests_config))
	@echo "==== Building gcovtests ($(gcovtests_config)) ===="
	@${MAKE} --no-print-directory -C . -f gcovtests.make config=$(gcovtests_config)
endif

clean:
	@${MAKE} --no-print-directory -C . -f testenv.make clean
	@${MAKE} --no-print-directory -C . -f moduletests.make clean
	@${MAKE} --no-print-directory -C . -f moduletestsIL.make clean
	@${MAKE} --no-print-directory -C . -f devtests.make clean
	@${MAKE} --no-print-directory -C . -f buildfail.make clean
	@${MAKE} --no-print-directory -C . -f memleak.make clean
	@${MAKE} --no-print-directory -C . -f dstw_gen.make clean
	@${MAKE} --no-print-directory -C . -f dstw_runtime.make clean
	@${MAKE} --no-print-directory -C . -f systemtests.make clean
	@${MAKE} --no-print-directory -C . -f dstw_stop.make clean
	@${MAKE} --no-print-directory -C . -f gcovapp.make clean
	@${MAKE} --no-print-directory -C . -f gcovtests.make clean

help:
	@echo "Usage: make [config=name] [target]"
	@echo ""
	@echo "CONFIGURATIONS:"
	@echo "  ci"
	@echo "  debug"
	@echo "  memleak"
	@echo "  bullseye"
	@echo "  fail"
	@echo ""
	@echo "TARGETS:"
	@echo "   all (default)"
	@echo "   clean"
	@echo "   testenv"
	@echo "   moduletests"
	@echo "   moduletestsIL"
	@echo "   devtests"
	@echo "   buildfail"
	@echo "   memleak"
	@echo "   dstw_gen"
	@echo "   dstw_runtime"
	@echo "   systemtests"
	@echo "   dstw_stop"
	@echo "   gcovapp"
	@echo "   gcovtests"
	@echo ""
	@echo "For more information, see https://github.com/premake/premake-core/wiki"